apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: amazon-as2-backend
  namespace: customs-broker
spec:
  replicas: ${replicas}
  revisionHistoryLimit: 0
  template:
    metadata:
      namespace: customs-broker
      labels:
        app: amazon-as2-backend
        api-version: v1
        tier: app
      annotations:
        app/version: ${appVersion}
        app/git: ${gitSHA1}
        app/timestamp: ${dateNow}
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/prometheus"
    spec:
      containers:
        - name: amazon-as2-backend-app
          image: tmregistry.azurecr.io/${imageTag}
          imagePullPolicy: Always
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          readinessProbe: # todo
            httpGet:
              path: /health
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
          livenessProbe: # todo
            httpGet:
              path: /health
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 90 # avoid restarts for long flyway migrations
            timeoutSeconds: 5
          terminationMessagePath: /dev/termination-log
          envFrom:
            - configMapRef:
                name: amazon-as2-backend-config
            - secretRef:
                name: amazon-as2-backend-db-secret
#          volumeMounts: # todo
#            - name: secret-sop-backend-ssh-cert-volume
#              readOnly: true
#              mountPath: /certificates
#            - name: secret-mail-templater-jwt-keypair
#              readOnly: true
#              mountPath: /security
          ports:
            - containerPort: 10080
            - containerPort: 9092
      volumes:
        - name: secret-sop-backend-ssh-cert-volume
          secret:
            secretName: mail-templater-allowed-certificates
        - name: secret-mail-templater-jwt-keypair
          secret:
            secretName: mail-templater-jwt-keypair


---

apiVersion: v1
kind: Service
metadata:
  name: amazon-as2-service
  namespace: customs-broker
  labels:
    app: amazon-as2-backend
    api-version: v1
    tier: service
spec:
  selector:
    labels:
      app: amazon-as2-backend
      api-version: v1
      tier: app
  ports:
    - name: amazon-as2-1
      protocol: TCP
      port: 10080
      targetPort: 10080
    - name: amazon-as2-2
      protocol: TCP
      port: 9092
      targetPort: 9092
  type: ClusterIP
  sessionAffinity: None

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: templater-ingress-v2
  namespace: default
  annotations:
    #ingress.kubernetes.io/enable-cors: "true"
    kubernetes.io/ingress.class: "nginx"
#    nginx.ingress.kubernetes.io/configuration-snippet: |
#      more_set_headers "X-Request-Id: $request_id";
#      more_set_headers "Access-Control-Allow-Origin: $allow_origin";
#      more_set_headers "Access-Control-Allow-Methods: GET, PUT, POST, DELETE, OPTIONS";
#      more_set_headers "Access-Control-Allow-Credentials: true";
#      more_set_headers "Access-Control-Allow-Headers: x-requested-with, Content-Type, origin, authorization, accept, client-security-token";
spec:
  tls:
    - hosts:
        - ${host_name}
      secretName: tls-secret
  rules:
    - host: ${host_name}
      http:
        paths:
          - path: /amazon-as2
            backend:
              serviceName: amazon-as2-service
              servicePort: 10080
